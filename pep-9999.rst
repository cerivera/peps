PEP: 9999
Title: Pattern matching
Version: $Revision$
Last-Modified: $Date$
Author: Ivan Levkivskyi <levkivskyi@gmail.com>
BDFL-Delegate:
Discussions-To: Python-Dev <python-dev@python.org>
Status: Draft
Type: Standards Track
Content-Type: text/x-rst
Created: 2020-05-04
Python version: 3.10
Resolution:

Abstract
========

This PEP proposes to add pattern match statements to Python. This will
allow more readable and reliable code when dealing with well structured
heterogeneous data. The PEP contains syntax specification, runtime
specification, and recommended specification for static type checkers and
similar tools.

Previously PEP 275 and PEP 3101 that proposed similar constructs were
rejected. Here we take a different approach and focus on generalizing
iterable and dictionary unpacking instead of optimizing (or syntax-sugaring)
``if ... elif ... else`` statement. Also, recently implemented PEP 617
introduced a new PEG parser for Python that allows more flexible syntactic
options.


Rationale and Goals
===================



Syntax and Semantics
====================

Match arms
----------

This will be statement, not expression.

There can be more than one arm per block

Match semantics
---------------

First in chain of ``if ... elif ... elif ...``

Note: this this not a switch statement.


Allowed patterns
----------------


Class patterns
--------------


Guards
------


Matching names
--------------


Named sub-matches
-----------------


Keyword shorthand
-----------------


Ad-hoc matches
--------------

Python is pragmatic -> ad-hoc special-casing


Runtime specification
=====================

The ``__match__()`` protocol
----------------------------


Impossible matches
-------------------


Default ``object.__match__()``
------------------------------


Dataclasses
-----------


Builtins and standard library
-----------------------------


Static checkers specification
=============================

Exhaustiveness checks
---------------------


Sealed classes as ADTs
----------------------


Type erasure
------------


Backwards Compatibility
=======================

This PEP is fully backwards compatible.


Reference Implementation
========================

None yet.


Rejected Ideas
==============

Use a hard keyword
------------------

No, because:

* The new parser doesn't require us to do this.

* ``match`` is so commonly used in existing code

Make it an expression
---------------------

No, because it is inconsistent with other things in Python

Use ``or`` to combine matches
-----------------------------

No, because:

* Can cause ambiguity with guards, also with other operators like ``|``.

* In real life it will be anyway split over multiple lines.

* Using multiple arms is not uncommon in other languages.

Make read semantics for names the default
-----------------------------------------

No, because common case should be the default.

Use dispatch dict semantics for matches
---------------------------------------

Because it may be very tricky if possible at all (unlike for switch statement).

Allow fall through without a match
----------------------------------

No, because:

* This can cause subtle bugs.

* It is easy to add an ``else`` match arm.

* Use ad-hoc matches for special cases.

Allow ``elif match`` statements
-------------------------------

No, because there should be only one way to do it. If people will ask about
this, we can always reconsider later.

Allow arbitrary expressions in reference matches
------------------------------------------------

No, because:

* May be syntactically tricky

* Keep it clean/simple

* The meaning of a pattern is primarily left hand side (like for iterable unpacking),
  let us keep it that way.

Use ``__getitem__()`` and ``__getstate__()`` as fallback
--------------------------------------------------------

No, because:

* May be surprising.

* Inconsistent with current way unpacking works.

Ignore underscores in coinciding name match
-------------------------------------------

No, because this is subtle and may be unexpected, instead use ``_1``, ``_2`` etc.


References
==========


Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
